{"mappings":"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","sources":["src/app.ts","src/api.ts","src/config.ts","src/logger.ts","src/utils.ts","src/publish.ts","src/persistence.ts"],"sourcesContent":["import { ApiWithLogin, LoginResultResponse, ParamData, ParamType, SolixApi } from \"./api\";\nimport { anonymizeConfig, getConfig } from \"./config\";\nimport { consoleLogger } from \"./logger\";\nimport { sleep } from \"./utils\";\nimport { Publisher } from \"./publish\";\nimport { FilePersistence, Persistence } from \"./persistence\";\n\nconst config = getConfig();\nconst logger = consoleLogger(config.verbose);\n\nfunction isLoginValid(loginData: LoginResultResponse, now: Date = new Date()) {\n  return new Date(loginData.token_expires_at * 1000).getTime() > now.getTime();\n}\n\nasync function run(): Promise<void> {\n  logger.log(JSON.stringify(anonymizeConfig(config)));\n  const api = new SolixApi({\n    username: config.username,\n    password: config.password,\n    country: config.country,\n    logger,\n  });\n\n  const persistence: Persistence<LoginResultResponse> = new FilePersistence(config.loginStore);\n\n  const publisher = new Publisher(config.mqttUrl, config.mqttRetain, config.mqttClientId.length > 0 ? config.mqttClientId : undefined, config.mqttUsername, config.mqttPassword);\n  async function fetchAndPublish(): Promise<void> {\n    logger.log(\"Fetching data\");\n    let loginData = await persistence.retrieve();\n    if (loginData == null || !isLoginValid(loginData)) {\n      const loginResponse = await api.login();\n      loginData = loginResponse.data ?? null;\n      if (loginData) {\n        await persistence.store(loginData);\n      } else {\n        logger.error(`Could not log in: ${loginResponse.msg} (${loginResponse.code})`);\n      }\n    } else {\n      logger.log(\"Using cached auth data\");\n    }\n    if (loginData) {\n      const loggedInApi = api.withLogin(loginData);\n      const siteHomepage = await loggedInApi.siteHomepage();\n      let topic = `${config.mqttTopic}/site_homepage`;\n      await publisher.publish(topic, siteHomepage.data);\n      for (const site of siteHomepage.data?.site_list ?? []) {\n        // scen info\n        const scenInfo = await loggedInApi.scenInfo(site.site_id);\n        topic = `${config.mqttTopic}/site/${site.site_name}/scenInfo`;\n        await publisher.publish(topic, scenInfo.data);\n        // schedule\n        const deviceParams = await loggedInApi.getSiteDeviceParam( {\n          siteId: site.site_id,\n          paramType: ParamType.LoadConfiguration,\n        }) ;\n        const schedule = deviceParams.data.param_data;\n        topic = `${config.mqttTopic}/site/${site.site_name}/schedule`;\n        await publisher.publish(topic, schedule);\n\n        const test = await loggedInApi.getSiteDeviceParam( {\n          siteId: site.site_id,\n          paramType: \"3\" as any,\n        }) ;\n\n        const test2 = await loggedInApi.getSiteDeviceParam( {\n          siteId: site.site_id,\n          paramType: \"2\" as any,\n        }) ;\n\n        const test1 = await loggedInApi.getSiteDeviceParam( {\n          siteId: site.site_id,\n          paramType: \"1\" as any,\n        }) ;\n\n        const test5 = await loggedInApi.getSiteDeviceParam( {\n          siteId: site.site_id,\n          paramType: \"6\" as any,\n        }) ;\n\n        const test6 = await loggedInApi.getSiteDeviceParam( {\n          siteId: site.site_id,\n          paramType: \"6\" as any,\n        }) ;\n        var x = 0;\n      }\n      logger.log(\"Published.\");\n    } else {\n      logger.error(\"Not logged in\");\n    }\n  }\n\n  for (;;) {\n    const start = new Date().getTime();\n    try {\n      await fetchAndPublish();\n    } catch (e) {\n      logger.warn(\"Failed fetching or publishing printer data\", e);\n    }\n    const end = new Date().getTime() - start;\n    const sleepInterval = config.pollInterval * 1000 - end;\n    logger.log(`Sleeping for ${sleepInterval}ms...`);\n    await sleep(sleepInterval);\n  }\n}\n\nrun()\n  .then(() => {\n    logger.log(\"Done\");\n  })\n  .catch((err) => {\n    logger.error(err);\n    process.exit(1);\n  });\n","import fetch from \"node-fetch\";\nimport { Logger } from \"./logger\";\nimport { ECDH, createCipheriv, createECDH, createHash } from \"crypto\";\n\nexport interface Options {\n  username: string;\n  password: string;\n  country: string;\n  logger?: Logger;\n}\n\nexport interface LoginRequest {\n  ab: string;\n  client_secret_info: {\n    public_key: string;\n  },\n  enc: number;\n  email: string;\n  password: string;\n  time_zone: number;\n  verify_code?: string;\n  captcha_id?: string;\n  answer?: string\n  transaction: string;\n}\n\nexport interface SuccessResponse<T> {\n  code: 0;\n  msg: \"success!\";\n  data: T\n}\n\nexport interface BaseResponse<T> {\n  code: number;\n  msg: string;\n  data?: T;\n  outline?: any;\n  trace_id: string;\n}\n\nexport type ResultResponse<T> = BaseResponse<T> & SuccessResponse<T>;\n\nexport interface LoginResultResponse {\n  user_id: string;\n  email: string;\n  nick_name: string;\n  auth_token: string;\n  token_expires_at: number;\n  avatar: string;\n  invitation_code?: string;\n  inviter_code?: string;\n  verify_code_url?: string;\n  mac_addr: string;\n  domain: string;\n  ab_code: string;\n  geo_key: string;\n  privilege: number;\n  phone: string;\n  phone_code: string;\n  server_secret_info: {\n    public_key: string\n  } | null,\n  params: Array<{\n    param_type: number;\n    param_value: string;\n  }> | null;\n  trust_list: Array<TrustDevice> | null;\n  token_id: number;\n  fa_info: {\n    step: number;\n    info: string;\n  },\n  country_code: string;\n}\n\nexport interface DeviceData {\n  device_sn: string;\n  product_code: string;\n  bt_ble_id: string;\n  bt_ble_mac: string;\n  device_name: string;\n  alias_name: string;\n  img_url: string;\n  link_time: number;\n  wifi_online: boolean;\n  wifi_name: string;\n  relate_type: string[];\n  charge: boolean;\n  bws_surplus: number;\n  device_sw_version: string;\n}\n\nexport interface DeviceDataResponse {\n  data: DeviceData[];\n}\n\nexport interface SiteHomepageResponse {\n  site_list: Site[],\n  solar_list: any[],\n  pps_list: any[],\n  solarbank_list: Solarbank[],\n}\n\nexport interface UserMqttInfo {\n  /**\n   * A unique identifier for the user.\n   * Typically a SHA-1 hash or similar.\n   */\n  user_id: string;\n\n  /**\n   * A string that denotes the name of the application.\n   */\n  app_name: string;\n\n  /**\n   * Formed as a combination of the user_id and app_name.\n   */\n  thing_name: string;\n\n  /**\n   * Identifier for a certificate.\n   */\n  certificate_id: string;\n\n  /**\n   * A PEM-formatted X.509 certificate.\n   */\n  certificate_pem: string;\n\n  /**\n   * The RSA private key, PEM-formatted.\n   */\n  private_key: string;\n\n  /**\n   * RSA Public key, PEM-formatted. Was always empty\n   */\n  public_key: string;\n\n  /**\n   * Address of the MQTT endpoint.\n   */\n  endpoint_addr: string;\n\n  /**\n   * A PEM-formatted Root CA certificate.\n   * Used to validate the authenticity of the remote server.\n   */\n  aws_root_ca1_pem: string;\n\n  origin: string;\n  \n  /**\n   * PKCS#12, a binary format for storing the server certificate, \n   * any intermediate certificates, and the private key in one encryptable file.\n   */ \n  pkcs12: string;\n\n}\n\nexport interface Site {\n  site_id: string,\n  site_name: string,\n  site_img: string,\n  device_type_list: number[]\n}\n\nexport interface Solarbank {\n  device_pn: string,\n  device_sn: string,\n  device_name: string,\n  device_img: string,\n  battery_power: `${number}`,\n  bind_site_status: string,\n  charging_power: `${number}`,\n  power_unit: string,\n  charging_status: `${number}`,\n  status: `${number}`,\n  wireless_type: `${number}`,\n  main_version: `${number}`,\n  photovoltaic_power: `${number}`,\n  output_power: `${number}`\n}\n\nexport interface ScenInfo {\n  home_info: {\n    home_name: string,\n    home_img: string,\n    charging_power: `${number}`,\n    power_unit:string,\n  },\n  solar_list: any[],\n  pps_info: {\n    pps_list: any[],\n    total_charging_power: `${number}`,\n    power_unit:string,\n    total_battery_power: `${number}`,\n    updated_time: string,\n    pps_status: number,\n  },\n  statistics: Array<{\n    type: `${number}`,\n    total: `${number}`\n    unit: string,\n  }>,\n  topology_type:`${number}`,\n  solarbank_info: {\n    solarbank_list: Solarbank[],\n    total_charging_power: `${number}`,\n    power_unit: string,\n    charging_status: `${number}`,\n    total_battery_power: `${number}`,\n    updated_time: string,\n    total_photovoltaic_power: `${number}`,\n    total_output_power: `${number}`\n  },\n  retain_load: string,\n  updated_time: string,\n  power_site_type: number,\n}\n\nexport interface EnergyAnalysis {\n  power: Array<{\n    time:`${number}:${number}`,\n    value:`${number}`\n  }>,\n  charge_trend: null,\n  charge_level: any[],\n  power_unit: string,\n  charge_total: `${number}`,\n  charge_unit: string,\n  discharge_total: `${number}`,\n  discharge_unit: string,\n  charging_pre: `${number}`,\n  electricity_pre: `${number}`,\n  others_pre: `${number}`,\n  statistics: Array<{\n    type: `${number}`,\n    total: `${number}`,\n    unit:string\n  }>\n}\n\nexport interface LoadData {\n  time: string;\n  load: number;\n}\n\nexport interface HomeLoadChartResponse {\n  data: LoadData[];\n}\n\n\nexport interface TrustDevice {\n  open_udid: string;\n  phone_model: string;\n  is_current_device: number;\n}\n\nexport interface ApplianceLoad {\n  id: number;\n  name: string;\n  power: number;\n  number: number;\n}\n\nexport interface Range {\n  id: number;\n  start_time: string;\n  end_time: string;\n  turn_on: boolean;\n  appliance_loads: ApplianceLoad[];\n}\n\nexport interface LoadConfiguration {\n  ranges: Range[];\n  min_load: number;\n  max_load: number;\n  step: number;\n}\n\n\nexport enum ParamType {\n  LoadConfiguration = \"4\",\n}\n\nexport type ParamData<T extends ParamType> = T extends ParamType.LoadConfiguration ? LoadConfiguration : string;\n\nexport interface SiteDeviceParamResponse<T extends ParamType> {\n  param_data: ParamData<T>\n}\n\nexport type ApiWithLogin = ReturnType<typeof SolixApi.prototype.withLogin>;\n\nexport class SolixApi {\n  private readonly SERVER_PUBLIC_KEY = \"04c5c00c4f8d1197cc7c3167c52bf7acb054d722f0ef08dcd7e0883236e0d72a3868d9750cb47fa4619248f3d83f0f662671dadc6e2d31c2f41db0161651c7c076\";\n\n  private readonly username: string;\n\n  private readonly password: string;\n  \n  private readonly country: string;\n\n  private readonly timezone: string;\n\n  private ecdh: ECDH = createECDH(\"prime256v1\");\n  \n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.logger = options.logger ?? console;\n    this.country = options.country.toUpperCase();\n    this.timezone = this.getTimezoneGMTString();\n    this.ecdh.generateKeys();\n  }\n\n  private md5(s: string) {\n    this.logger.log(s);\n    return createHash(\"md5\").update(Buffer.from(s)).digest(\"hex\");\n  }\n\n  private getTimezoneGMTString(): string {\n    const tzo = -new Date().getTimezoneOffset();\n    const dif = tzo >= 0 ? \"+\" : \"-\";\n    return `GMT${dif}${this.pad(tzo / 60)}:${this.pad(tzo % 60)}`;\n  }\n\n  private pad(num: number): string {\n    const norm = Math.floor(Math.abs(num));\n    return `${(norm < 10 ? \"0\" : \"\")}${norm}`;\n  }\n\n  private encryptAPIData(data: string, key: Buffer): string {\n    const cipher = createCipheriv(\"aes-256-cbc\", key, key.slice(0, 16));\n    return (\n      cipher.update(data, \"utf8\", \"base64\") +\n      cipher.final(\"base64\")\n    );\n  }\n\n  private async fetch(endpoint: string, data?: any, headers?: Record<string, string>) {\n    this.logger.log(JSON.stringify(data));\n    const urlBuilder = new URL(endpoint, \"https://ankerpower-api-eu.anker.com\");\n    const url = urlBuilder.href;\n    \n    return fetch(url, {\n      method: \"POST\",\n      body: data != null ? JSON.stringify(data) : undefined,\n      headers: {\n        [\"Content-Type\"]: \"application/json\",\n        Country: this.country,\n        Timezone: this.timezone,\n        [\"Model-Type\"]: \"DESKTOP\",\n        [\"App-Name\"]: \"anker_power\",\n        [\"Os-Type\"]: \"android\",\n        ...headers,\n      },\n    });\n  }\n\n  public withLogin(login: LoginResultResponse) {\n    const headers = { [\"X-Auth-Token\"]: login.auth_token, \"gtoken\": this.md5(login.user_id) };\n    const authFetch = async <T>(endpoint: string, data?: any): Promise<ResultResponse<T>> => {\n      const response = await this.fetch(endpoint, data, headers);\n      return await response.json() as ResultResponse<T>;\n    };\n    return {\n      getRelateAndBindDevices: async () => {\n        const data = {};\n        return authFetch<DeviceDataResponse>(\"/power_service/v1/app/get_relate_and_bind_devices\", data);\n      },\n      getUserMqttInfo: async () => {\n        return authFetch<UserMqttInfo>(\"/app/devicemanage/get_user_mqtt_info\");\n      },\n      siteHomepage: async () => {\n        const data = {};\n        return authFetch<SiteHomepageResponse>(\"/power_service/v1/site/get_site_homepage\", data);\n      },\n      getHomeLoadChart: async ({\n        siteId,\n        deviceSn = \"\", // Was always an empty string\n      }:{ \n        siteId: string,\n        deviceSn?: string\n      }) => {\n        const data = { site_id:siteId, device_sn: deviceSn };\n        return authFetch<HomeLoadChartResponse>(\"/power_service/v1/site/get_home_load_chart\", data);\n      },\n      scenInfo: async (siteId: string) => {\n        const data = { site_id: siteId };\n        return authFetch<ScenInfo>(\"/power_service/v1/site/get_scen_info\", data);\n      },\n      energyAnalysis:async ({\n        siteId,\n        deviceSn,\n        type,\n        startTime = new Date(),\n        endTime,\n        deviceType = \"solar_production\",\n      }: {\n        siteId: string, \n        deviceSn: string, \n        type: \"day\" | \"week\" | \"year\", \n        startTime?: Date, \n        endTime?: Date,\n        deviceType?: \"solar_production\"\n      }) => {\n        const startTimeString = `${startTime.getUTCFullYear()}-${this.pad(startTime.getUTCMonth())}-${this.pad(startTime.getUTCDate())}`;\n        const endTimeString = endTime != null ? `${endTime.getUTCFullYear()}-${endTime.getUTCMonth()}-${endTime.getUTCDate()}` : \"\";\n        const data = {\n          site_id: siteId,\n          device_sn:deviceSn,\n          type,\n          start_time: startTimeString,\n          device_type: deviceType,\n          end_time: endTimeString,\n        };\n        return authFetch<EnergyAnalysis>(\"/power_service/v1/site/energy_analysis\", data);\n      },\n      getSiteDeviceParam: async <T extends ParamType>({\n        paramType,\n        siteId,\n      }:{\n        paramType: T,\n        siteId: string\n      }): Promise<ResultResponse<SiteDeviceParamResponse<T>>> => {\n        const data = { site_id: siteId, param_type: paramType };\n        const response = await authFetch<{ param_data: string }>(\"/power_service/v1/site/get_site_device_param\", data);\n        if (response.data != null) {\n          switch (paramType) {\n            case ParamType.LoadConfiguration:\n              return { ...response, data: { param_data: JSON.parse(response.data.param_data) as ParamData<T> } };\n            default:\n              return response as ResultResponse<SiteDeviceParamResponse<T>>;\n          }\n        }\n        return response as ResultResponse<SiteDeviceParamResponse<T>>;\n      },\n      setSiteDeviceParam: async <T extends ParamType>({\n        paramType,\n        siteId,\n        cmd = 17, // Unknown what this means but it's alway 17\n        paramData,\n      }:{\n        paramType: T,\n        siteId: string,\n        cmd?: number,\n        paramData: ParamData<T>,\n      }) => {\n        let data = { site_id: siteId, param_type: paramType, cmd, param_data: paramData as unknown };\n        switch (paramType) {\n          case ParamType.LoadConfiguration:\n            data = { ...data, param_data: JSON.stringify(paramData) };\n            break;\n          default:\n            // Should be a string already\n        }\n        return authFetch<Record<string, never>>(\"/power_service/v1/site/set_site_device_param\", data);\n      },\n    };\n  }\n\n  public async login(): Promise<ResultResponse<LoginResultResponse>> {\n    const data: LoginRequest = {\n      ab: this.country,\n      client_secret_info: {\n        public_key: this.ecdh.getPublicKey(\"hex\"),\n      },\n      enc: 0,\n      email: this.username,\n      password: this.encryptAPIData(this.password, this.ecdh.computeSecret(Buffer.from(this.SERVER_PUBLIC_KEY, \"hex\"))),\n      time_zone: new Date().getTimezoneOffset() !== 0 ? -new Date().getTimezoneOffset() * 60 * 1000 : 0,\n      transaction: `${new Date().getTime()}`,\n    };\n    const response = await this.fetch(\"/passport/login\", data);\n    if (response.status === 200) {\n      return await response.json() as ResultResponse<LoginResultResponse>;\n    } else {\n      throw new Error(`Login failed (${response.status}): ${await response.text()}`);\n    }\n  }\n}\n","import { config as configDotenv } from \"dotenv\";\n\nfunction stringEnvVar(envVarName: keyof typeof process[\"env\"]): string;\n\nfunction stringEnvVar(\n  envVarName: keyof typeof process[\"env\"],\n  defaultValue: string\n): string;\n\nfunction stringEnvVar(\n  envVarName: keyof typeof process[\"env\"],\n  defaultValue: null\n): string | undefined;\nfunction stringEnvVar(\n  envVarName: keyof typeof process[\"env\"],\n  defaultValue?: string | null,\n): string | undefined {\n  const value = process.env[envVarName];\n  if (value == null && defaultValue === undefined) {\n    console.error(`Missing env var ${envVarName}`);\n    process.exit(1);\n  }\n  return value ?? defaultValue ?? undefined;\n}\nfunction intEnvVar(\n  envVarName: keyof typeof process[\"env\"],\n  defaultValue?: number,\n): number {\n  if (defaultValue != null) {\n    const value = stringEnvVar(envVarName, null);\n    if (value == null) {\n      return defaultValue;\n    }\n    return parseInt(value, 10);\n  } else {\n    const value = stringEnvVar(envVarName);\n    return parseInt(value, 10);\n  }\n}\nfunction boolEnvVar(\n  envVarName: keyof typeof process[\"env\"],\n  defaultValue = false,\n): boolean {\n  const value = stringEnvVar(envVarName, null);\n  if (value == null) {\n    return defaultValue;\n  }\n  return value === \"true\";\n}\n\nfunction arrayEnvVar(\n  envVarName: keyof typeof process[\"env\"],\n  defaultValue?: string[],\n): string[] {\n  if (defaultValue != null) {\n    const value = stringEnvVar(envVarName, null);\n    if (value == null) {\n      return defaultValue;\n    }\n    return value.split(\",\");\n  } else {\n    const value = stringEnvVar(envVarName);\n    return value.split(\",\");\n  }\n}\nexport function getConfig() {\n  configDotenv();\n  return {\n    username: stringEnvVar(\"S2M_USER\"),\n    password: stringEnvVar(\"S2M_PASSWORD\"),\n    country: stringEnvVar(\"S2M_COUNTRY\"),\n    loginStore: stringEnvVar(\"S2M_LOGIN_STORE\", \"auth.data\"),\n    pollInterval: intEnvVar(\"S2M_POLL_INTERVAL\", 30),\n    mqttUrl: stringEnvVar(\"S2M_MQTT_URI\"),\n    mqttClientId: stringEnvVar(\"S2M_MQTT_CLIENT_ID\", \"solix2mqtt\"),\n    mqttUsername: stringEnvVar(\"S2M_MQTT_USERNAME\", null),\n    mqttPassword: stringEnvVar(\"S2M_MQTT_PASSWORD\", null),\n    mqttRetain: boolEnvVar(\"S2M_MQTT_RETAIN\"),\n    mqttTopic: stringEnvVar(\"S2M_MQTT_TOPIC\", \"solix\"),\n    verbose: boolEnvVar(\"S2M_VERBOSE\", false),\n  };\n}\n\nexport function anonymizeConfig(\n  config: ReturnType<typeof getConfig>,\n): ReturnType<typeof getConfig> {\n  const newConfig = { ...config };\n  const hideKeys: Array<keyof ReturnType<typeof getConfig>> = [\n    \"password\",\n  ];\n  for (const key of hideKeys) {\n    if (config[key] != null) {\n      (newConfig as any)[key] = \"***\";\n    }\n  }\n  return newConfig;\n}\n","export type Logger = Pick<typeof console, \"log\" | \"warn\" | \"error\">;\n\nexport function consoleLogger(verbose: boolean): Logger {\n  return {\n    log(...params: Parameters<typeof console.log>) {\n      if (verbose) {\n        console.log(`[${new Date().toISOString()}]`, ...params);\n      }\n    },\n    warn(...params: Parameters<typeof console.warn>) {\n      if (verbose) {\n        console.warn(`[${new Date().toISOString()}]`, ...params);\n      }\n    },\n    error(...params: Parameters<typeof console.error>) {\n      console.error(`[${new Date().toISOString()}]`, ...params);\n    },\n  };\n}\n","export async function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import { AsyncMqttClient, connectAsync } from \"async-mqtt\";\n\nexport class Publisher {\n\n  private client: AsyncMqttClient | undefined;\n\n  constructor(\n    private readonly url: string,\n    private readonly retain?: boolean,\n    private readonly clientId?: string,\n    private readonly username?: string,\n    private readonly password?: string,\n  ) {}\n\n  private async getClient() {\n    if (this.client && this.client.connected) {\n      return this.client;\n    }\n    await this.client?.end();\n    this.client = await connectAsync(this.url, {\n      clientId: this.clientId,\n      username: this.username,\n      password: this.password,\n    });\n    return this.client;\n  }\n\n  async publish(topic: string, message: any) {\n    await (await this.getClient()).publish(topic, JSON.stringify(message), { retain: this.retain });\n  }\n}","import { LoginResultResponse } from \"./api\";\nimport { promises as fs } from \"fs\";\n\nexport interface Persistence<T> {\n  store(data: T): Promise<void>;\n  retrieve(): Promise<T | null>;\n}\n\nexport class FilePersistence<T> implements Persistence<T> {\n  constructor(private readonly path: string) {}\n  \n  async store(data: T): Promise<void> {\n    await fs.writeFile(this.path, JSON.stringify(data), \"utf8\");\n  }\n  \n  async retrieve(): Promise<T | null> {\n    try {\n      const data = await fs.readFile(this.path, \"utf8\");\n      return JSON.parse(data) as T;\n    } catch (err) {\n      if ((err as any).code === \"ENOENT\") {\n        return null;\n      } else {\n        throw err;\n      }\n    }\n  }\n}"],"names":[],"version":3,"file":"index.js.map"}